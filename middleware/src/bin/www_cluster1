var app = require('../app');
var cluster = require('cluster')
var os = require('os')
var debug = require('debug')('backend:server');
var http = require('http');
var workers = process.env.WORKERS || os.cpus().length;
var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

function initServer() {
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

if (cluster.isMaster) {
  console.log('start cluster with %s workers', workers);
  for (var i = 0; i < workers; ++i) {
      var worker = cluster.fork().process;
      console.log('worker %s started.', worker.pid);
  }
  cluster.on('exit', function(worker) {
      console.log('worker %s died. restart...', worker.process.pid);
      cluster.fork();
  });

} else {
  initServer()
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

